↑default: true
https: true
port: 443
server: api.openai.com
trustAllServerCertificates: false
↓GenerateJsonFormChat [transactions.JsonHttpTransaction-1686577278139]: 
  ↑default: true
  httpParameters: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Content-Type
            - java.lang.String: 
              - ↑value: application/json
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Authorization
            - java.lang.String: 
              - ↑value: Bearer ${lib_C8Oforms_AI.GPT.apikey.secret}
  httpVerb: POST
  responseTimeout: 120
  subDir: v1/chat/completions
  handlers: 
    →: |
      '
      // Handles the transaction start event.
      function onTransactionStarted() {
      	const history = [];
      	if (reset != "true") {
      		try {
      			const h = context.httpSession.getAttribute(''AI_history'');
      			if (Array.isArray(h)) {
      				h.forEach(v => history.push(v));		
      			}
      		} catch (e) {}
      	}
      	
      	history.push({
      		role: ''user'',
      		content: prompt
      	});
      	
      	include(''./js/sample.js'');
      	const content = ''You are a survey expert, smart and creative, in all domains. Only reply a form survey in JSON format, nothing else. Only use same types of fields and structure than the following sample, :\n'' +
      				         JSON.stringify(sample) + '' \nYou have now to generate one with more pages and fields, using this input and its language:\n'' + prompt;
      	const body = {
      		model: ''gpt-3.5-turbo'',
      		messages: [
      			{
      				role: ''user'',
      				content
      			}
      		]
      	};
      	
      //	history.forEach(v => body.messages.push(v));
      	
          context.connector.postQuery = JSON.stringify(body);
          log.info("body: " + context.connector.postQuery);
          context.httpSession.setAttribute(''AI_history'', history);
      }
      
      // Handles the XML generated event.
      function onXmlGenerated() {
          const response = context.getXpathApi().selectSingleNode(dom, ''//content/text()'');
          if (response != null) {
      		let value = response.getNodeValue();
      		value = value.replaceFirst(''^.*?(\\{[\\d\\D]*}).*?$'', ''$1'');
      		response.getParentNode().removeChild(response);
      	    const h = context.httpSession.getAttribute(''AI_history'');
      	    h.push({
      			role: ''assistant'',
      			content: value
      		})
      	    log.info("response: " + h[h.length - 1].content);
      	    context.addTextNodeUnderRoot(''response'', value);
      	} else {
      		context.addTextNodeUnderRoot(''response'', ''content from AI not found'');
      	}
      }
      '
  ↓prompt [variables.RequestableHttpVariable-1686658211203]: 
    httpMethod: POST
  ↓reset [variables.RequestableHttpVariable-1686658211206]: 
    httpMethod: POST
    value: true
↓GenerateJsonFormCompletion [transactions.JsonHttpTransaction-1686577278139]: 
  httpParameters: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Content-Type
            - java.lang.String: 
              - ↑value: application/json
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Authorization
            - java.lang.String: 
              - ↑value: Bearer ${lib_chatgpt.apikey.secret}
  httpVerb: POST
  responseTimeout: 120
  subDir: v1/completions
  handlers: 
    →: |
      '
      // Handles the transaction start event.
      function onTransactionStarted() {
      	const history = [];
      	if (reset != "true") {
      		try {
      			const h = context.httpSession.getAttribute(''AI_history'');
      			if (Array.isArray(h)) {
      				h.forEach(v => history.push(v));
      			}
      		} catch (e) { }
      	}
      
      	history.push({
      		role: ''user'',
      		content: prompt
      	});
      	
      	include(''./js/sample.js'');
      
      	const content = ''For the question in english ["Tell me About you"], I respect format and not other types of the following sample:\n'' +
      		JSON.stringify(sample) + ''\nFor the question ["'' + prompt + ''"] I use the same format and the question language but not the same questions to generate: '';
      
      	const body = {
      		model: ''text-davinci-003'',
      		prompt: content,
      		max_tokens: 3000
      	};
      
      	context.connector.postQuery = JSON.stringify(body);
      	log.info("body: " + context.connector.postQuery);
      	context.httpSession.setAttribute(''AI_history'', history);
      }
      
      // Handles the XML generated event.
      function onXmlGenerated() {
      	const response = context.getXpathApi().selectSingleNode(dom, ''//text/text()'');
      	if (response != null) {
      		let value = response.getNodeValue();
      		value = value.replaceFirst(''^.*?(\\{[\\d\\D]*}).*?$'', ''$1'');
      		response.getParentNode().removeChild(response);
      		const h = context.httpSession.getAttribute(''AI_history'');
      		h.push({
      			role: ''assistant'',
      			content: value
      		})
      		log.info("response: " + h[h.length - 1].content);
      		context.addTextNodeUnderRoot(''response'', value);
      	} else {
      		context.addTextNodeUnderRoot(''response'', ''content from AI not found'');
      	}
      }
      '
  ↓prompt [variables.RequestableHttpVariable-1686579584287]: 
    httpMethod: POST
  ↓reset [variables.RequestableHttpVariable-1686579616563]: 
    httpMethod: POST
    value: true