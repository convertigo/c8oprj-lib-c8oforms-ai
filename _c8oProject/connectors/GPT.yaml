↑default: true
https: true
port: 443
server: ${lib_C8Oforms_AI.GPT.server=api.openai.com}
trustAllServerCertificates: false
↓GenerateJsonFormChat [transactions.JsonHttpTransaction-1686577278139]: 
  ↑default: true
  httpParameters: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Content-Type
            - java.lang.String: 
              - ↑value: application/json
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Authorization
            - java.lang.String: 
              - ↑value: Bearer ${lib_C8Oforms_AI.GPT.apikey.secret}
  httpVerb: POST
  responseTimeout: 240
  subDir: v1/chat/completions
  handlers: 
    →: |
      '
      // Handles the transaction start event.
      function onTransactionStarted() {
      	include(''./js/sample.js'');
      	const messages = [{
      		role: ''system'',
      		content: ''Hello! I am a survey expert, smart and creative, in all domains. Only reply a form survey in JSON format, nothing else. Only use same types of fields (other types are forbidden), and structure than the following sample :\n'' +
      			JSON.stringify(sample) + '' \nYou have now to generate one with more pages and fields, using this input and its language, except for thumbnailFromPexelsPrompt field that has to be in english.''
      	}, {
      		role: ''user'',
      		content: prompt
      	}];
      	
      	const body = {
      		model: model,
      		response_format: {"type": "json_object"},
      		messages: messages
      	};
      	
      	context.connector.postQuery = JSON.stringify(body);
      	log.info("body: " + context.connector.postQuery);
      }
      
      // Handles the XML generated event.
      function onXmlGenerated() {
      	const response = context.getXpathApi().selectSingleNode(dom, ''//content/text()'');
      	if (response != null) {
      		context.addTextNodeUnderRoot(''response'', response.getNodeValue());
      	} else {
      		context.addTextNodeUnderRoot(''response'', ''content from AI not found'');
      	}
      }
      '
  ↓prompt [variables.RequestableHttpVariable-1686658211203]: 
    httpMethod: POST
  ↓model [variables.RequestableHttpVariable-1711132098790]: 
    httpMethod: POST
    value: ${lib_C8Oforms_AI.GPT.model=gpt-4o}
↓UpdateJsonFormChat [transactions.JsonHttpTransaction-1686577278139]: 
  httpParameters: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Content-Type
            - java.lang.String: 
              - ↑value: application/json
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: Authorization
            - java.lang.String: 
              - ↑value: Bearer ${lib_C8Oforms_AI.GPT.apikey.secret}
  httpVerb: POST
  responseTimeout: 240
  subDir: v1/chat/completions
  handlers: 
    →: |
      '
      // Handles the transaction start event.
      function onTransactionStarted() {
      	const c8oForms = com.twinsoft.convertigo.engine.Engine.theApp.databaseObjectsManager.getOriginalProjectByName("C8Oforms");
      	let allTypes = false;
      	if (c8oForms != null) {
      		const allTypesFile = new java.io.File(c8oForms.getDirFile(), ''DisplayObjects/mobile/assets/components/AllTypes.json'');
      		if (allTypesFile.exists()) {
      			allTypes = org.apache.commons.io.FileUtils.readFileToString(allTypesFile, ''UTF-8'');
      		}
      	}
      
      	
      	messages = JSON.parse(messages);
      	messages.unshift({
      		role: ''system'',
      		content: ''You are a survey expert, smart and creative, in all domains. ''
      			+ ''Only use same types of fields (other types are forbidden) from this array: \n''
      			+ allTypes + ''\n''
      			+ ''You have to edit the input user survey without any other modifications. Please keep all existing keys and values of the user\''s JSON. ''
      			+ ''You can edit, add or remove "pages", "formulaire" and "chatSummary", using the user input prompt and its language. ''
      			+ ''For new fields and pages, generate unique "id" and use their reference logically.''
      			+ ''If you have to add new "description" instead of "<img>", insert in "html" the value "pexel:" + english prompt, I will replace after. ''
      			+ ''Please create or update a root "chatSummary" key that do a short condensed summary of the whole conversation with the user, like if the user ask for this survey at once. ''
      			+ ''Also add a root "chatResponse" key with some words for the user in its language.''
      	});
      	
      	messages[messages.length - 1].content += ''\n\n'' + formJSON;
      	
      	const body = {
      		model: model,
      		response_format: {type: ''json_object''},
      		messages: messages
      	};
      		
      	context.connector.postQuery = JSON.stringify(body);
      	log.info(''body: '' + context.connector.postQuery);
      }
      '
  ↓prompt [variables.RequestableHttpVariable-1730221703841]: 
    httpMethod: POST
  ↓model [variables.RequestableHttpVariable-1730221703847]: 
    httpMethod: POST
    value: ${lib_C8Oforms_AI.GPT.model=gpt-4o}
  ↓formJSON [variables.RequestableHttpVariable-1730221775325]: 
    httpMethod: POST